# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1?:function_name}(${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
regex /((=)\s*|(:)\s*|(\()|\b)/f/(\))?/
snippet f
	function${M1?: ${1:functionName}}($2) {
		${0}
	}${M2?;}${M3?,}${M4?)}
snippet funcao
	function${M1?: ${1:functionName}}($2) {
		${0}
	}${M2?;}${M3?,}${M4?)}
	${3:$1}();
snippet Funcao
	function${M1?: ${1:functionName}}($2) {
		${0}
	}${M2?;}${M3?,}${M4?)}
# Immediate function
trigger \(?f\(
endTrigger \)?
snippet f(
	(function(${1}) {
		${0:/* code */}
	}(${1}));
# if
snippet if
	if (${1:true}) {
		${0}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}

# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${0:/* code */}
	}
# try
snippet try
	try {
		${0:/* code */}
	} catch (e) {}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
regex /([,{[])|^\s*/:f/
	${1:method_name}: function(${2:attribute}) {
		${0}
	}${3:,}
# Timer functions
snippet setTimeout
regex /\b/st|timeout|setTimeo?u?t?/
	setTimeout(function() {${2}}, ${1:1000});
snippet setInterval
	setInterval(function() {${2}}, ${1:1000});
# Get Elements
snippet gett
	getElementsByTagName('${2:TagName}');${3}
snippet query
	querySelector("${1}");
# Get Element
snippet get
	getElementById('${1:id}');${3}
snippet queryAll
	querySelectorAll("${1}");
# eventlistener
snippet addeventlistener
	addEventListener("${1:click}", ${2} () => {
		
	});
# console.log (Firebug)
snippet cl
	console.log(${1:Var});
snippet alert
	alert(${1:Var});
snippet Con
	console.log(${1});
# return
snippet ret
	return ${1:result}
# hasOwnProperty
snippet has
	hasOwnProperty(${1})
# docstring
snippet /**
	/**
	 * ${1:description}
	 *
	 */
snippet @par
regex /^\s*\*\s*/@(para?m?)?/
	param {${1:type}} ${2:name} ${3:description}
snippet @ret
	returns {${1:type}} ${2:description}
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function(${2:argument}) {
		${3:// initial code ...}

		$1 = function($2) {
			${4:// main code}
		};
	}
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};
		
		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${3:// code ...}

		return instance;
	}
# class
snippet class
regex /^\s*/clas{0,2}/
	class ${1:Name}{
		$0
	}
snippet constructor
	constructor(${1}){
		this.$1 = $1;
	}
snippet method
	${1:name}(${2:args}) {
		${0}
	}
snippet this.
	this.${1} = $1;
# 
snippet for-
	for (let ${1:i} = ${2:Things}.length; ${1:i}--; ) {
		${0:${2:Things}[${1:i}];}
	}
# for (...) {...}
snippet for
	for (let ${1:i} = 0; $1 < ${2:Things}.length; $1++) {
		${3:$2[$1]}$0
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (let ${1:i} = ${2:Things}.length - 1; $1 >= 0; $1--) {
		${3:$2[$1]}$0
	}
# for (property in object ) { ... }
snippet fori
	for (let ${1:prop} in ${2:Things}) {
		${0:$2[$1]}
	}

#modules
snippet def
	define(function(require, exports, module) {
	"use strict";
	const ${1/.*\///} = require("${1}");
	
	});
snippet req
guard ^\s*
	const ${1/.*\///} = require("${1}");
	$0
snippet requ
guard ^\s*
	const ${1/.*\/(.)/\u$1/} = require("${1}").${1/.*\/(.)/\u$1/};
	$0
snippet prom
	new Promise((resolve, reject) => {
		$1
	});
snippet obterDataHojeFutura
	// Obtenha a data 
	const hoje = new Date();
	const dataAtual = hoje.getFullYear() + "-" + (hoje.getMonth() + 1) + "-" + (hoje.getDate() < 10 ? "0" + hoje.getDate() : hoje.getDate());
	
	// Criar uma nova data baseada na atual
	const dataFutura = new Date(hoje);
	dataFutura.setMonth(dataFutura.getMonth() + 6);
	
	// Formatar as datas no formato "YYYY-MM-DD"
	const formatarData = data => {
	const ano = data.getFullYear();
	const mes = String(data.getMonth() + 1).padStart(2, "0"); // Adiciona 1 ao mÃªs porque o Ã­ndice começa em 0
	const dia = String(data.getDate()).padStart(2, "0");
	return `${1:${2:ano}}-${3:${4:mes}}-${5:${6:dia}}`;
	};
	
	dataInicio.value = dataAtual;
	dataFinal.value = formatarData(dataFutura);
snippet obterData
	// Obtenha a data 
	function obterData() {
	  // Obter a data e hora atual do dispositivo
	  const dataHoraAtual = new Date();
	  
	  // Formatar a data e hora para o formato correto
	  const ano = dataHoraAtual.getFullYear();
	  const mes = String(dataHoraAtual.getMonth() + 1).padStart(2, '0');
	  const dia = String(dataHoraAtual.getDate()).padStart(2, '0');
	  const horas = String(dataHoraAtual.getHours()).padStart(2, '0');
	  const minutos = String(dataHoraAtual.getMinutes()).padStart(2, '0');
	  const segundos = String(dataHoraAtual.getSeconds()).padStart(2, '0');
	  const milisegundos = String(dataHoraAtual.getMilliseconds()).padStart(2, '0');
	  // const dataHoraFormatada = `--T:`;
	  const dataHoraFormatada = `${1:dia}/${2:mes}/${3:ano} - ${4:horas}:${5:minutos}:${6:segundos}:${7:milisegundos}`;
	  const data = `${11:${}${2:ano}}-${12:${}${3:mes}}-${13:${}${4:dia}}`;
		const horario = `${21:${}${5:horas}}:${22:${}${6:minutos}}:${23:${}${7:segundos}}:${24:${}${8:milisegundos}}`;
		// console.log(milisegundos);
	  // console.log(dataHoraFormatada);
	  return dataHoraFormatada;
	}
snippet dataHorario
	function dataHorario() {
		const dataHoraAtual = new Date();
		const ano = dataHoraAtual.getFullYear();
		const mes = String(dataHoraAtual.getMonth() + 1).padStart(2, "0");
		const dia = String(dataHoraAtual.getDate()).padStart(2, "0");
		const horas = String(dataHoraAtual.getHours()).padStart(2, "0");
		const minutos = String(dataHoraAtual.getMinutes()).padStart(2, "0");
		const segundos = String(dataHoraAtual.getSeconds()).padStart(2, "0");
		const milisegundos = String(dataHoraAtual.getMilliseconds()).padStart(2, "0");
		const data = `${11:${}${2:ano}}-${12:${}${3:mes}}-${13:${}${4:dia}}`;
		const horario = `${21:${}${5:horas}}:${22:${}${6:minutos}}:${23:${}${7:segundos}}:${24:${}${8:milisegundos}}`;
		return {
		data: data,
		horario: horario
		};
	}
	const dataData = dataHorario.data;
	const dataHora = dataHorario.horario;
	let fim = "2024-05-12";
	let inicio = "2024-05-11";
	function difDias(fim, inicio) {
	let fimItem = fim;
	let inicioItem = inicio;
	const DiffInMs = new Date(fimItem) - new Date(inicioItem);
	const DiffInDays = DiffInMs / (1000 * 60 * 60 * 24);
	console.log(DiffInDays);
	}
	difDias(fim, inicio);
snippet obterDataReg
	// Obtenha a data 
	function obterDataReg() {
	  // Obter a data e hora atual do dispositivo
	  const dataHoraAtual = new Date();
	  
	  // Formatar a data e hora para o formato correto
	  const ano = dataHoraAtual.getFullYear();
	  const mes = String(dataHoraAtual.getMonth() + 1).padStart(2, '0');
	  const dia = String(dataHoraAtual.getDate()).padStart(2, '0');
	  const horas = String(dataHoraAtual.getHours()).padStart(2, '0');
	  const minutos = String(dataHoraAtual.getMinutes()).padStart(2, '0');
	  const segundos = String(dataHoraAtual.getSeconds()).padStart(2, '0');
	  const milisegundos = String(dataHoraAtual.getMilliseconds()).padStart(2, '0');
	  const dataHoraFormatada = `${11:${21:dia}}/${12:${22:mes}}/${13:${23:ano}} - ${14:${24:horas}}:${15:${25:minutos}}:${16:${26:segundos}}:${17:${27:milisegundos}}`;
	  const dataReg = `${1:${}${13:ano}}-${2:${}${12:mes}}-${3:${}${11:dia}}`;
	  return dataReg;
		}
snippet obterHoraReg
	// Obtenha a hora
	function obterHora() {
	  // Obter a hora atual do dispositivo
	  const dataHoraAtual = new Date();
	  
	  // Formatar a data e hora para o formato correto
	  const ano = dataHoraAtual.getFullYear();
	  const mes = String(dataHoraAtual.getMonth() + 1).padStart(2, '0');
	  const dia = String(dataHoraAtual.getDate()).padStart(2, '0');
	  const horas = String(dataHoraAtual.getHours()).padStart(2, '0');
	  const minutos = String(dataHoraAtual.getMinutes()).padStart(2, '0');
	  const segundos = String(dataHoraAtual.getSeconds()).padStart(2, '0');
	  const milisegundos = String(dataHoraAtual.getMilliseconds()).padStart(2, '0');
	  const dataHoraFormatada = `${dia}/${mes}/${ano} - ${horas}:${minutos}:${segundos}:${milisegundos}`;
	  const horaReg = `${1:horas}:${2:minutos}:${3:segundos}:${4:milisegundos}`;
	  return horaReg;
	 }
snippet criarMostrarCategorias
	function addCategoria() {
	  var newCategoryAdd = document.querySelector(".popInput").value.trim();
	  var newCategoryAdds = document.querySelector(".popInput");
	  var newCategoryIcon = '<img src="./imgs/new-category.svg" alt=""></img>';
	  var categoryIcon = '<img src="./imgs/new-category.svg" alt=""></img>';
	  
	  if (newCategoryAdd == null || newCategoryAdd == '') {
	  	alert("Nenhum nome digitado.")
	  	return
	  }
	  
	  categorias.push({category: newCategoryAdd});
	  localStorage.setItem("categorias", JSON.stringify(categorias));
	  transactions.forEach((transaction) => {
	    if (transaction.category === newCategoryAdd) {
	      transaction.categoryIcon = newCategoryIcon;
	    }
	   
	  });
	  newCategoryAdds.value = "";
	
	  // Adicionar nova opção ao select
	  const selectElement = document.getElementById("categorias");
	  const newOption = document.createElement("option");
	  newOption.value = newCategoryAdd;
	  newOption.textContent = newCategoryAdd;
	  selectElement.appendChild(newOption);
	  
	  boxPopInput.style="display:none;"
		}

	
	function openCategorias() {
	  const selectElements = document.getElementById("categorias");
	  selectElements.innerHTML = `	<option value="" disabled selected required>Categorias</option>`;
	  categorias.forEach((categorys) => {
	  const newOption = document.createElement("option");
	  newOption.value = categorys.category;
	  newOption.textContent = categorys.category;
	  selectElements.appendChild(newOption);
	  });
	  //console.log(categorias);
	}
	openCategorias();
	
	<label>Categorias</label>
					<div id="categoriaNova">
					  
					<select name="category" id="categorias" onclick="openCategorias()">
						<option value="" disabled selected required>Categorias</option>
						<option value="Comida">Comida</option>
						<option value="Trabalho">Trabalho</option>
						<option value="Fitness">Fitness</option>
						<option value="Transporte">Transporte</option>
					</select>
				<!--	<button class="addCategoria"
					onclick="addCategoriass()">add</button>
				-->
				  <button class="addCategoria"
					onclick="openAddCategorias()">
				    Nova
				  </button>
					</div>
snippet criarLocalStorage
	const $2Get = JSON.parse(localStorage.getItem("$2"));
	let ${2:nomeArray} = $2Get !== null ? $2Get : [];
snippet salvarLocalStorage
	localStorage.setItem("${2:nomeArray}", JSON.stringify($2));
snippet prevDefault
	event.preventDefault();
snippet Classe
	const ${1:classSelector} = document.querySelector(".${2:$1}");
snippet Id
	const ${1:idSelector} = document.querySelector("#${2:$1}");
snippet IdStyle
	const ${1:idSelector} = document.querySelector("#${2:$1}");
	const style${3:$1} = ${4:$1}.currentStyle || window.getComputedStyle(${5:$1});
snippet gerarID
	const gerarID = () => Math.round(Math.random() * 1000000);
snippet consLog
	console.log(${1:alerta});
snippet eruda
	<script src="https://cdn.jsdelivr.net/npm/eruda" onload="eruda.init()">
	</script>
snippet padraojs
	const classSelector = document.querySelector(".classSelector");
	const idSelector = document.querySelector("#idSelector");
	
	function functionName() {
	
	}
	functionName();
	
	function functionNamed() {
	
	}
	functionNamed();
	
	classSelector.addEventListener("click", functionName);
	idSelector.addEventListener("click", functionNamed);
snippet forEach
	forEach((item, index) => {
		
	});
snippet difData
	function difDatas() {
		const input_data_inicio = document.querySelector("#input_data_inicio").value;
		const input_data_fim = document.querySelector("#input_data_fim").value;
		const diffInMs = new Date(input_data_fim) - new Date(input_data_inicio);
		const diffInDays = diffInMs / (1000 * 60 * 60 * 24);
		console.log(diffInDays);
		}
		
	 /*	<p class="js-data"></p> */
		function setarData() {
		let elementoData = document.querySelector(".js-data");
		
		let data = new Date();
		
		const objData = {
		year: "numeric",
		month: "long",
		weekday: "long",
		day: "numeric"
		};
		
		elementoData.textContent = data.toLocaleTimeString("pt-BR", objData);
		}
		setarData();
		setInterval(() => {
		setarData();
		}, 1000);
snippet datasDif
	let fim = "2024-04-01";
	let inicio = "2024-04-01";
	const diffEmMs = new Date(fim) - new Date(inicio);
	const diffEmDays = diffEmMs / (1000 * 60 * 60 * 24);
	return diffEmDays;
snippet formatoDataBr
	split("-").reverse().join("/")
	function formatarDataPtBr(data) {
		const partes = data.split("-").reverse();
		partes[2] = partes[2].slice(2); // Remove os dois primeiros dígitos do ano
		return partes.join("/");
	}
snippet tamFilhos
	children.length
snippet tamFilhosFechar
	const ${1:classSelector} = document.querySelector(".${2:$1}");
	if (${3:$1}.children.length === 1) {
	while (${4:$1}.firstChild) {
	${5:$1}.removeChild(${6:$1}.firstChild);
		}
	} 
snippet innerHTML
	innerHTML = ``;
snippet click
	click();
snippet setAttribute
	setAttribute("${1:name}", "${2:$1}");
snippet toFixed
	.toFixed(2)
snippet DOMContentLoaded
	  document.addEventListener("DOMContentLoaded", () => {
	  	
	  });
snippet eventClick
	addEventListener("${1:click}", ${2} () => {
		
	});
snippet eventChange
	document.addEventListener("change", () => {
	  
	 });
snippet styleBody
  const body = document.body;
  const styleBody = body.currentStyle || window.getComputedStyle(body);
snippet desmarcarRadioCheckbox
   // itera com método do Array para compatibilidade
	Array.prototype.forEach.call(document.querySelectorAll('#labelCheck input[type=checkbox], #labelCheck input[type=radio]'), function(radio) {
	  radio.addEventListener('click', function() {
	    var self = this;
	    // obter elementos com o mesmo nome exceto o próprio e grava estado desmarcado
	    Array.prototype.filter.call(document.getElementsByName(this.name), function(filterEl) {
	      return self !== filterEl;
	    }).forEach(function(otherEl) {
	      delete otherEl.dataset.check;
	    });
	
	    // grava estado baseado no estado anterior
	    if (this.dataset.hasOwnProperty('check')) {
	      this.checked = false;
	      delete this.dataset.check;
	    } else {
	      this.dataset.check = '';
	    }
	  }, false);
	});
snippet marcarUmRadioCheckbox
	function marcaDesmarca(caller) {
	  var checks = document.querySelectorAll('#labelCheck input[type="checkbox"]'); 
	  // checks.forEach(c => c.checked = (c == caller) );
	  
	  checks.forEach((c, i) => {
	  	c.checked = (c == caller);
	
	  });
	}
trigger \(?click\(
endTrigger \)?
snippet semanas
  const inputDataNumSemana = document.querySelector("#inputDataNumSemana");
  function semana() {
	  moment.locale("pt-BR");
	  t = moment(`${5:inputDataNumSemana.value}`);
	  console.log(`${1:t.week()} de ${2:t.weekYear()}`); 
	  console.log(`${3:t.isoWeek()} de ${4:t.isoWeekYear()}`);
  }